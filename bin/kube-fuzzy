#!/usr/bin/env bash

# shellcheck disable=2164
path_to_script="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
path_to_repo_root="$( cd -- "$(dirname "$path_to_script")" >/dev/null 2>&1 ; pwd -P )"

source "$path_to_repo_root/core.sh"

if [ -z "$KUBE_FUZZY_DEFAULT_EXEC" ]; then
  KUBE_FUZZY_DEFAULT_EXEC=(-it bash)
fi

# shellcheck disable=2016
help_text="
Usage:
  $0 <action> ...

Arguments:
  '--' splits the arg list into 3 useful parts
  '---' is equivalent to '-- --'

  $0 <command> [type] [...global args] -- [...get args] -- [...preview args]
  $0 <command> [type] [...global args] --- [...preview args]

  # For example, this command
  $0 exec --context=foo -n bar --- -it bin/console

    # Delegates to this one for the list
    kubectl get pod --context=foo -n bar

    # Delegates to this one for the preview
    kubectl describe pod <selection> --context=foo -n bar

    # Once a pod is selected, the command will run
    kubectl exec <selection> -it bin/console

Commands:

  # Interactively list and look at the YAML for some <type> (get + describe)

    # print resource name
    $0 get <type> [...args]

    # print yaml of resource
    $0 describe <type> [...args]

  # Interactively select an item of <type> to edit

    $0 edit <type> [...args]

  # Interactively select a pod to execute a command against (no args == '${KUBE_FUZZY_DEFAULT_EXEC[*]}')

    $0 exec [...args]

Gotchas:

 - '--all-namespaces' will not work properly because forwarding namespace
   to later commands will not work - for that use 'kube-with-namespace'
"

kube_fuzzy() {
  if [ "$#" -eq 0 ]; then
    __log_error "${BOLD}action${NORMAL} (exec, describe, etc.) is ${BOLD}required${NORMAL}"
    echo "$help_text"
    return 1
  else
    # get action
    action="$1"
    shift

    # split the arg list
    arg_type='0'

    action_args=()
    get_args=()

    if [ -n "$KUBECTL_FORCE_NAMESPACE" ]; then
      action_args+=(--namespace "$KUBECTL_FORCE_NAMESPACE")
      get_args+=(--namespace "$KUBECTL_FORCE_NAMESPACE")
    fi

    if [ -n "$KUBECTL_FORCE_CONTEXT" ]; then
      action_args+=(--context "$KUBECTL_FORCE_CONTEXT")
      get_args+=(--context "$KUBECTL_FORCE_CONTEXT")
    fi

    # some actions take a type
    case "$action" in
      'get' | 'g' | 'describe' | 'd' | 'edit' | 'e')
        if [ "$#" -eq 0 ]; then
          __log_warning "${BOLD}type${NORMAL} (pod, deploy, ing, svc, etc.) not provided; prompting..."
          resource_type="$(__kubectl_select_resource_type "${get_args[@]}")"
          if [ -z "$resource_type" ]; then
            __log_error "${BOLD}type${NORMAL} (pod, deploy, ing, svc, etc.) not selected or provided"
            return 1
          fi
        else
          resource_type="$1"
          shift
        fi
        ;;
      'exec' | 'x')
        resource_type="pod"
        ;;
    esac

    for arg in "$@"; do
      if [ "$arg" = '--' ]; then
        ((arg_type+=1))
      elif [ "$arg" = '---' ]; then
        ((arg_type+=2))
      else
        if [ "$arg_type" -eq 0 ]; then
          action_args+=("$arg")
          get_args+=("$arg")
        elif [ "$arg_type" -eq 1 ]; then
          get_args+=("$arg")
        else
          action_args+=("$arg")
        fi
      fi
    done

    # get user's selected object or objects
    # NB: avoid creating subshell when running selection function by using a temp file
    selection_file="$(mktemp)"
    __kubectl_select_many "$resource_type" "${get_args[@]}" > "$selection_file"
    readarray -t selection < "$selection_file"

    if [ "${#selection[@]}" -ge 1 ]; then
      case "$action" in
        get | g)
          kubectl get -o name "$resource_type" "${selection[@]}" "${action_args[@]}" | \
            eval "$KUBE_FUZZY_YAML_VIEWER"
          ;;
        describe | d)
          kubectl describe "$resource_type" "${selection[@]}" "${action_args[@]}" | \
            eval "$KUBE_FUZZY_YAML_VIEWER"
          ;;
        edit | e)
          if [ "${#selection[@]}" -gt 1 ]; then
            # shellcheck disable=2016
            __log_info 'multiple pods selected; running multiple `edit` commands'
          fi

          for pod in "${selection[@]}"; do
            if ! __confirm_then_execute kubectl edit "$resource_type" "${selection[@]}" "${action_args[@]}"; then
              break
            fi
          done
          ;;
        exec | x)
          if [ "${#action_args[@]}" -eq 0 ]; then
            action_args=("${KUBE_FUZZY_DEFAULT_EXEC[@]}")
          fi

          if [ "${#selection[@]}" -gt 1 ]; then
            # shellcheck disable=2016
            __log_info 'multiple pods selected; running multiple `exec` commands'
          fi

          for pod in "${selection[@]}"; do
            if ! __confirm_then_execute kubectl exec "$pod" "${action_args[@]}"; then
              break
            fi
          done
          ;;
        esac
    else
      __log_warning "no $resource_type selected"
    fi
  fi
}

if [ "$#" -eq 0 ]; then
  kube_fuzzy
else
  kube_fuzzy "$@"
fi
