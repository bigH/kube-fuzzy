#!/usr/bin/env bash

# shellcheck disable=2164
path_to_script="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
path_to_repo_root="$( cd -- "$(dirname "$path_to_script")" >/dev/null 2>&1 ; pwd -P )"

source "$path_to_repo_root/core.sh"

if [ -z "$KUBE_FUZZY_YAML_VIEWER" ]; then
  if __command_exists bat; then
    KUBE_FUZZY_YAML_VIEWER="bat --color=always --language=yaml --style=plain"
  else
    KUBE_FUZZY_YAML_VIEWER="less"
  fi
fi

PROGRAM_NAME="$(basename "$0")"

# shellcheck disable=2016
help_text="
Usage:
  $PROGRAM_NAME <action> ...

Arguments:
  '--' splits the arg list into 3 useful parts
  '---' is equivalent to '-- --'

  $PROGRAM_NAME <command> [type] [...global args] -- [...get args] -- [...preview args]
  $PROGRAM_NAME <command> [type] [...global args] --- [...preview args]

  # For example, in this command structure:
  $PROGRAM_NAME get pods <shared args> -- <get args> -- <preview args>

    # Delegates to this one for the list
    kubectl get pod <shared args> <get args>

    # Delegates to this one for the preview
    kubectl describe pod <shared args> <preview args> | eval \$KUBE_FUZZY_YAML_VIEWER

    # Selecting pods then pressing <Enter> will print the pod names -
    #   great for piping to other commands or command-substitution.

Commands:

  # Interactively list and look at the YAML for some <type> (get + describe)

    # print resource name
    $PROGRAM_NAME get <type> [...args]

    # print yaml of resource
    $PROGRAM_NAME describe <type> [...args]

  # Interactively select an item of <type> to edit
    $PROGRAM_NAME get <type> [...args] | xargs -n1 kubectl edit <type>

  # Interactively select a pod to exec <command> (see alias 'kx')
    $PROGRAM_NAME get pod [...args] | xargs -o -n1 -I'{}' kubectl exec -it '{}' -- <command>

Gotchas:

- '--all-namespaces' will not work properly because forwarding namespace
  to later commands will not work - for that use 'kube-with-namespace'

Advanced:

- Set the KUBE_FUZZY_YAML_VIEWER environment variable to a command that
  will render/page YAML to the terminal. For example, 'less'.

Useful Aliases:

$(sed 's/^/  /' "$path_to_repo_root/aliases.sh")
"

kube_fuzzy() {
  if [ "$#" -eq 0 ]; then
    __log_error "${BOLD}action${NORMAL} (get OR describe) is ${BOLD}required${NORMAL}"
    echo "$help_text"
    return 1
  else
    # get action
    action="$1"
    shift

    # split the arg list
    arg_type=0

    action_args=()
    get_args=()

    # support for `kube-with-namespace`
    if [ -n "$KUBECTL_FORCE_NAMESPACE" ]; then
      action_args+=(--namespace "$KUBECTL_FORCE_NAMESPACE")
      get_args+=(--namespace "$KUBECTL_FORCE_NAMESPACE")
    fi

    # support for `kube-with-context`
    if [ -n "$KUBECTL_FORCE_CONTEXT" ]; then
      action_args+=(--context "$KUBECTL_FORCE_CONTEXT")
      get_args+=(--context "$KUBECTL_FORCE_CONTEXT")
    fi

    # some actions take a type
    case "$action" in
      'get' | 'g' | 'describe' | 'd')
        if [ "$#" -eq 0 ]; then
          __log_warning "${BOLD}type${NORMAL} (pod, deploy, ing, svc, etc.) not provided; prompting..."
          resource_type="$(__kubectl_select_resource_type "${get_args[@]}")"
          if [ -z "$resource_type" ]; then
            __log_error "${BOLD}type${NORMAL} (pod, deploy, ing, svc, etc.) not selected or provided"
            return 1
          fi
        else
          resource_type="$1"
          shift
        fi
        ;;
    esac

    for arg in "$@"; do
      if [ "$arg" = '--' ]; then
        ((arg_type+=1))
      elif [ "$arg" = '---' ]; then
        ((arg_type+=2))
      else
        if [ "$arg_type" -eq 0 ]; then
          action_args+=("$arg")
          get_args+=("$arg")
        elif [ "$arg_type" -eq 1 ]; then
          get_args+=("$arg")
        else
          action_args+=("$arg")
        fi
      fi
    done

    # get user's selected object or objects
    # NB: avoid creating subshell when running selection function by using a temp file
    selection_file="$(mktemp)"
    __kubectl_select_many "$resource_type" "${get_args[@]}" > "$selection_file"
    readarray -t selection < "$selection_file"

    if [ "${#selection[@]}" -ge 1 ]; then
      case "$action" in
        get | g)
          kubectl get -o name "$resource_type" "${selection[@]}" "${action_args[@]}"
          ;;
        describe | d)
          kubectl describe "$resource_type" "${selection[@]}" "${action_args[@]}" | \
            eval "$KUBE_FUZZY_YAML_VIEWER"
          ;;
      esac
    else
      __log_warning "no $resource_type selected"
    fi
  fi
}

if [ "$#" -eq 0 ]; then
  kube_fuzzy
else
  kube_fuzzy "$@"
fi
